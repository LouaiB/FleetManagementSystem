@model MapViewModel
@{
    Layout = "LayoutManager";
    ViewData["Title"] = "Map";
    Delivery notificationDelivery = (Delivery)ViewData["NotificationDelivery"];
    bool notificationFlag = false;

    int Q = 0;
    string Name = "";
    string Email = "";
    string ClientId = "";

    if (notificationDelivery != null)
    {

        notificationFlag = true;
        ViewData["notificationId"] = notificationDelivery.Id;
        Q = notificationDelivery.Quantity;
        Name = notificationDelivery.Client.Name;
        Email = notificationDelivery.Client.Username;
        ClientId = ""+notificationDelivery.Client.Id;
    }





}




<html>
<head>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js"></script>

    <link rel="stylesheet" type="text/css" href="/css/component.css" />
    <link rel="stylesheet" type="text/css" href="/css/content.css" />
    <script src="/js/modernizr.custom.js"></script>

    <meta name="viewport" content="initial-scale=1.0, width=device-width" />
    <script src="https://js.api.here.com/v3/3.0/mapsjs-core.js"
            type="text/javascript" charset="utf-8"></script>
    <script src="https://js.api.here.com/v3/3.0/mapsjs-service.js"
            type="text/javascript" charset="utf-8"></script>
    <script src="https://js.api.here.com/v3/3.0/mapsjs-mapevents.js"
            type="text/javascript" charset="utf-8"></script>
    <script src="https://js.api.here.com/v3/3.0/mapsjs-ui.js"
            type="text/javascript" charset="utf-8"></script>
    <script type="text/javascript" charset="UTF-8"
            src="https://js.api.here.com/v3/3.0/mapsjs-places.js"></script>
    <link rel="stylesheet" type="text/css"
          href="https://js.api.here.com/v3/3.0/mapsjs-ui.css" />

    <style>

        #map {
            margin-left: 0px;
            margin-right: 0px;
            margin-top: 0px;
            height: 92vh;
            z-index: 1;
        }

        #map-title {
            text-align: center;
            margin-top: 0px;
            margin-bottom: 0px;
            background-color: #233237;
            padding-top: 10px;
            padding-bottom: 10px;
            border-bottom: solid 3px #474749;
            color: #eac67a;
            height: 6%;
        }

        #mapContainer {
            margin-right: 0px;
            padding-right: 0px;
            margin-left: 0px;
            padding-left: 0px;
            margin-bottom: 0px;
            padding-bottom: 0px;
            height: 93%;
        }

        #underbar {
            margin-top: 0px;
            padding-top: 0px;
            margin-right: 0px;
            padding-right: 0px;
            margin-left: 0px;
            padding-left: 0px;
            height: 7%;
            color: white;
            background-color: #233237;
            border-top: solid 2px #18121e;
        }

        #map-and-underbar-col {
            padding-right: 0px;
            padding-left: 0px;
            padding-bottom: 0px;
            height: inherit;
            border: solid 5px #18121e;
        }

        #vehicles-list-col {
            padding-right: 0px;
            padding-left: 0px;
            overflow-y: auto;
            height: inherit;
            border: solid 5px #18121e;
            border-left: 2px;
        }

            #vehicles-list-col > h3 {
                text-align: center;
                margin-top: 0px;
                margin-bottom: 0px;
                background-color: #233237;
                padding-top: 10px;
                padding-bottom: 10px;
                border-bottom: solid 3px #474749;
                color: #eac67a;
            }

        #vehicles {
            margin-bottom: 0px;
        }

        #vehicles-list {
            margin-bottom: 0px;
        }

        #vehicle-list-item {
            background-color: #f3f3f3;
        }

            #underbar .btn-primary, #vehicle-list-item .btn-primary, #center-list-item .btn-primary {
                background-color: #814942;
                border: solid 1px #4d2621;
            }

        .radio-inline {
            color: #d1877f;
        }

            .radio-inline:hover {
                color: #ecb9b3;
            }

        #click-section {
            border-right: solid 2px #18121e;
        }

        #click-label {
            font-size: large;
            margin-top: 10px;
            color: #d1877f;
            float: left;
            width: 30%;
        }

        #driver-details {
            text-align: center;
            margin-left: 50px;
            margin-right: 50px;
        }

            #driver-details > h1 {
                text-align: left;
                margin-left: 25%;
            }

            #driver-details .table {
                align-content: center;
                text-align: center;
                width: 100%;
            }

            #driver-details > h4 {
                color: rgb(41, 22, 22);
                background-color: #c4c4c7;
            }

        #driver-details-list {
        }

        #driver-details-mainpane {
        }

        #driver-details-sidepane {
        }

            #driver-details-sidepane > ul > li > h2 {
                color: #18121e;
            }

        #center-list {
            margin-bottom: 0px;
            overflow-y: scroll;
        }

        #center-list-item {
            background-color: #f3f3f3;
        }


        @@-webkit-keyframes fadeIn {
            from {
                opacity: 0;
            }

            to {
                opacity: 1;
            }
        }

        @@-moz-keyframes fadeIn {
            from {
                opacity: 0;
            }

            to {
                opacity: 1;
            }
        }

        @@keyframes fadeIn {
            from {
                opacity: 0;
            }

            to {
                opacity: 1;
            }
        }

        .fade-in {
            opacity: 0; /* make things invisible upon start */
            -webkit-animation: fadeIn ease-in 1; /* call our keyframe named fadeIn, use animattion ease-in and repeat it only 1 time */
            -moz-animation: fadeIn ease-in 1;
            animation: fadeIn ease-in 1;
            -webkit-animation-fill-mode: forwards; /* this makes sure that after animation is done we remain at the last keyframe value (opacity: 1)*/
            -moz-animation-fill-mode: forwards;
            animation-fill-mode: forwards;
            -webkit-animation-duration: 0.3s;
            -moz-animation-duration: 0.3s;
            animation-duration: 0.3s;
        }
    </style>

</head>

<body>

    <div id="map" class="row">

        <div class="col-lg-9" id="map-and-underbar-col">
            <!--   <h3 id="map-title">Map</h3> -->
            <div id="mapContainer"></div>
            <div id="underbar" class="row">
                <div class="col-lg-6" id="click-section">
                    <label id="click-label">Clicking sets:</label>

                    <div class="radio" style="float: right; width: 70%;" id="clickTypeRadioGroup">
                        <label class="radio-inline" style="font-size: medium"><input type="radio" id="clickType" name="clickType" value="none" checked>None</label>
                        <label class="radio-inline" style="font-size: medium"><input type="radio" id="clickType" name="clickType" value="source">Source</label>
                        <label class="radio-inline" style="font-size: medium"><input type="radio" id="clickType" name="clickType" value="destination">Destination</label>
                    </div>
                </div>
                <div class="col-lg-2" style="vertical-align:middle">
                    <button class="btn btn-primary" onclick="unsetSelectors()" style="font-size: large; height: 75%">Unset S/D</button>
                </div>
                <div class="col-lg-1"></div>
                <div class="col-lg-3">
                    <div class="morph-button morph-button-modal morph-button-modal-2 morph-button-fixed">
                        <button type="button" class="btn btn-primary">Add Delivery</button>
                        <div class="morph-content">
                            <div>
                                <div class="content-style-form content-style-form-1">
                                    <span class="icon icon-close">Close the dialog</span>
                                    <h2 style="color: whitesmoke">Add Delivery</h2>
                                    <form>

                                        <p>
                                            <label>Delivery Vehicle</label>
                                            <select class="form-control" id="deliveryVehicleSelect"></select>
                                        </p>
                                        <div id="ChangeFromNotification">
                                            <p><label>Quantity</label><input type="text" id="deliveryQuantity" /></p>
                                            <p>
                                                <label>Client</label>
                                                <button onclick="showClientsBox()">Select Client</button>
                                                <input type="hidden" id="clientInput" />
                                                <h4 id="selectedClientSpan"></h4>
                                            </p>
                                            </div>
                                            <p><button onclick="addDelivery();" id="deliverBtn">Deliver</button></p>
                                    </form>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
        <div class="col-lg-3" id="vehicles-list-col">
            <h3>Active Vehicles</h3>
            <div id="vehicles" class="list-group" height="50vh">
                <ul id="vehicles-list" class="list-group"></ul>
            </div>
            <h3>Centers</h3>
            <div id="centers" height="25vh">
                <ul id="centers-list" class="list-group"></ul>
            </div>
        </div>
    </div>

    <hr>

    <!-- DRIVER DETAILS SECTION -->
    <div id="driver-details">
        <h1>Driver Details</h1>
        <div class="row">
            <div id="driver-details-mainpane" class="col-lg-8">
                <table id="driver-details-list" class="table table-striped table-bordered">
                    <tr><td colsapn=2>No driver selected</td></tr>
                </table>
            </div>
            <div id="driver-details-sidepane" class="col-lg-4">

            </div>
        </div>
    </div>


    <input type="hidden" id="startLatitudeOptRouteInput" />
    <input type="hidden" id="startLongitudeOptRouteInput" /> <br />
    <input type="hidden" id="endLatitudeOptRouteInput" />
    <input type="hidden" id="endLongitudeOptRouteInput" />


    <script type="text/javascript">
        var notificationDeliveryId = 0;

    </script>
    @if (notificationDelivery != null)
    {
        <script type="text/javascript">
    notificationDeliveryId=@notificationDelivery.Id;
        </script>

    }

    <script src="/js/classie.js"></script>
    <script src="/js/uiMorphingButton_fixed.js"></script>
    <script>
        (function () {
            let docElem = window.document.documentElement, didScroll, scrollPosition;

            // trick to prevent scrolling when opening/closing button
            function noScrollFn() {
                window.scrollTo(scrollPosition ? scrollPosition.x : 0, scrollPosition ? scrollPosition.y : 0);
            }

            function noScroll() {
                window.removeEventListener('scroll', scrollHandler);
                window.addEventListener('scroll', noScrollFn);
            }

            function scrollFn() {
                window.addEventListener('scroll', scrollHandler);
            }

            function canScroll() {
                window.removeEventListener('scroll', noScrollFn);
                scrollFn();
            }

            function scrollHandler() {
                if (!didScroll) {
                    didScroll = true;
                    setTimeout(function () { scrollPage(); }, 60);
                }
            };

            function scrollPage() {
                scrollPosition = { x: window.pageXOffset || docElem.scrollLeft, y: window.pageYOffset || docElem.scrollTop };
                didScroll = false;
            };

            scrollFn();

            [].slice.call(document.querySelectorAll('.morph-button')).forEach(function (bttn) {
                new UIMorphingButton(bttn, {
                    closeEl: '.icon-close',
                    onBeforeOpen: function () {
                        // don't allow to scroll
                        noScroll();
                    },
                    onAfterOpen: function () {
                        // can scroll again
                        canScroll();
                    },
                    onBeforeClose: function () {
                        // don't allow to scroll
                        noScroll();
                    },
                    onAfterClose: function () {
                        // can scroll again
                        canScroll();
                    }
                });
            });

            // for demo purposes only
            [].slice.call(document.querySelectorAll('form button')).forEach(function (bttn) {
                bttn.addEventListener('click', function (ev) { ev.preventDefault(); });
            });
        })();





    </script>



    <script src="/js/map_init.js"></script>
    <script type="text/javascript">
    let vehicleDeliveriesList = [];
   
    </script>

    <button onclick="addRouteToMap1();">Test</button>

    @foreach (var v in (List<Vehicle>)Model.ActiveVehicles)
    {
        <script type="text/javascript">
            vehicleDeliveriesList = [];
        </script>
        @if (!(v.CurrentDriver.Deliveries == null) && v.CurrentDriver.Deliveries.Count > 0)
        {
            @foreach (var d in v.CurrentDriver.Deliveries)
            {
                @if (d.Driver == null || d.Driver.Id != v.CurrentDriver.Id || d.Company == null || d.Company.Id != v.CurrentDriver.Company.Id) { continue; }
                <script type="text/javascript">
        vehicleDeliveriesList.push({
            "deliveryID": "@d.Id",
            "startLatitude": "@d.SourceLatitude",
            "startLongitude": "@d.SourceLongtitude",
            "endLatitude": "@d.DestinationLatitude",
            "endLongitude": "@d.DestinationLongtitude",
            "sourceCity": "@d.SourceCity",
            "destinationCity":"@d.DestinationCity",
            "info": {
                "customerName": "@d.Client.Name",
                "customerEmail": "@d.Client.Username",
                "deliveryType": "@d.Company.OrderType",
                "orderTime": "@d.Time",
                "quantity":"@d.Quantity"
            }
        });
                </script>
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////
        @foreach (var m in (MapLocation[])Model.MapLocations)
        {
            if (m.Name == null || m.Image == null)
            {
                continue;
            }
            <script type="text/javascript">
        addCenterToMap(@m.Id, "@m.Name", @m.Latitude, @m.Longtitude, "@m.Image");

            </script>
        }





        @if (notificationDelivery != null)
        {
            <script type="text/javascript">
            
                    notificationDeliveryId =@notificationDelivery.Id;
    deliveryId = "" + notificationDeliveryId;
            </script>
        }

        @if (notificationDelivery != null)
        {
            <script type="text/javascript">
                        async function updateDeliveryInDb(vehicleId) {
                            


                            
                            const startLongitude = "@notificationDelivery.SourceLongtitude";
                            const startLatitude = "@notificationDelivery.SourceLatitude";
                            const endLatitude = "@notificationDelivery.SourceLatitude";
                            const endLongitude = "@notificationDelivery.SourceLongtitude";
                            const ajaxPostRequestJSON = {
                deliveryId: `${notificationDeliveryId}`,
                vehicleId: `${vehicleId}`,
                driverId: `${displayedVehicles[vehicleId].currentDriver.driverID}`
                            };
                            alert("Inside Update");
                                   notificationDeliveryId = 0;
                            changeDialogue();
                            $.ajax({
                                type: "POST",
                                url: "/Map/UpdateDeliveryBySupervisor",
                                data: ajaxPostRequestJSON,
                                success: async function (result) {
                                    alert("Delivery Added \n Delivery Id : " + result.result + "\n Vehicle Id : " + vehicleId);
                                    let client;
                                    clientsList.forEach(c => {
                                        if (c.ID == ajaxPostRequestJSON.clientID) {
                                            client = c;
                                            return;
                                        }
                                    });
                              


                                    const delivery = {
                                        "deliveryID": @notificationDelivery.Id,
                                        "startLatitude": startLatitude,
                                        "startLongitude": startLongitude,
                                        "endLatitude": endLatitude,
                                        "endLongitude": endLongitude,
                                        "sourceCity": @notificationDelivery.SourceCity,
                                        "destinationCity":@notificationDelivery.DestinationCity,
                                        "info": {
                                            "customerName": client.Name,
                                            "customerEmail": client.Email,
                                            "deliveryQuantity": @notificationDelivery.Quantity,
                                            "orderTime": "@notificationDelivery.Time"
                                            }
                                    };


                                             unsetSelectors();
                                        let flag = await addDeliveryToVehicle(vehicleId, delivery);

                                  if (flag) {
                                      showVehicleDetails(vehicleId);

                                }
                               
                                     }
                             });
                           
        }

            </script>
        }


     

        <script type="text/javascript">
        addVehicleToMap(@v.Id, @v.Latitude, @v.Longtitude,
            {
                "model": "@v.Make",
                "year": "@v.Model",
                "plateNo": "@v.LicensePlate",
                "FuelConsumption": "@v.FuelConsumption"
            },
            {
                "driverID": "@v.CurrentDriver.Id",
                "name": "@v.CurrentDriver.Name",
                "avatar": "/images/"+"@v.CurrentDriver.Image",
                "phone": "@v.CurrentDriver.Phonenumber",
                "email": "In DB but not attributed to Driver table",
                "birthdate": "@v.CurrentDriver.Birthdate"
            },
            vehicleDeliveriesList
        );
        </script>

    }
    

    <script type="text/javascript">
        console.log("VEHHHHHHHHHHHHH");
        console.log(displayedVehicles);
        fillVehicleList(displayedVehicles);
    </script>

    <script>
        const sel = document.querySelector("#deliveryVehicleSelect");

        let inner = "";
        inner += '<option value="auto" selected>Auto</option>';

        let vehicles = getVehiclesSM();
        for (v in vehicles) {
            inner += '<option value="' + vehicles[v].vehicleID + '">' + vehicles[v].driverName + '</option>';
        }

        sel.innerHTML = inner;
    </script>


    @foreach (var c in Model.Clients)
    {
        <script type="text/javascript">
        clientsList.push({
            ID: "@c.Id",
            Name: "@c.Name",
            Email: "@c.Username"
        });
        </script>
    }

    <script type="text/javascript">
        showCentersSidepane();
        function showClientsBox() {
            let tab = document.createElement("div");
            tab.id = "clients_tab";
            tab.style.position = "fixed";
            tab.style.width = "700px";
            tab.style.top = "200px";
            tab.style.left = "300px";
            tab.style.border = "solid 5px grey";
            tab.style.backgroundColor = "#fafafa";
            tab.style.color = "black";
            tab.style.padding = "20px";
            tab.style.fontSize = "17px";
            tab.style.zIndex = "10000";
            tab.classList.add("fade-in");

            let inner = '<table class="table"><tr><th>Name</td><th>Email</th><th>Choose</th></tr>';
            clientsList.forEach(c => {
                inner += '<tr>';

                inner += `<td>${c.Name}</td>`;
                inner += `<td>${c.Email}</td>`;
                inner += `<td><button onclick="selectClient(${c.ID}, '${c.Name}', '${c.Email}')" class="btn btn-primary">Select</button></td>`;

                inner += '</tr>';
            });
            inner += "</table>";

            tab.innerHTML = inner;
            document.body.appendChild(tab);
        }

        function selectClient(clientID, name, email) {
            const clientInput = document.querySelector("#clientInput");
            const selectedClientSpan = document.querySelector("#selectedClientSpan");

            clientInput.value = clientID;
            selectedClientSpan.innerHTML = name + " | " + email;
            closeClientsBox();
        }

        function closeClientsBox() {
            const tab = document.querySelector("#clients_tab");
            document.body.removeChild(tab);
        }




        var prev = "";
    function changeDialogue() {
       
            var inside = "";
       
        if (notificationDeliveryId > 0) {
             prev = document.getElementById("ChangeFromNotification").innerHTML;
            inside += " <p><label> Number of @Model.OrderType</label > ";
            inside += " <input type='text' id='deliveryQuantity' value='@Q' disabled /> </p>";
            inside += " <p><label>Client Name</label>";
            inside += "<input type='text' value='@Name'  disabled />";
            inside += "<label>Client Email</label> <input type='text' value='@Email'  <p>";
            inside+= "<input type='hidden'  id='clientInput'  value='@ClientId'/>";
            document.getElementById("ChangeFromNotification").innerHTML = inside;
        }
        else {
               document.getElementById("ChangeFromNotification").innerHTML = prev;
        }
          

        }


    </script>


    @if (notificationFlag)
    {
        <script type="text/javascript">

        setStart1(@notificationDelivery.SourceLatitude , @notificationDelivery.SourceLongtitude);
    setEnd1(@notificationDelivery.DestinationLatitude , @notificationDelivery.DestinationLongtitude);
    notificationDeliveryId =""+ @notificationDelivery.Id;
            changeDialogue();
        </script>
    }

    <script>
    setInterval(refetchAndRefresh, 5000);
    </script>
</body>
</html>

